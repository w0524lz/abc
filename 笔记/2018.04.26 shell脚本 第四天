牛老师电话 13872446891 

字串截取的三种方式：
${变量名:起始位置:长度}
expr substr "$变量名" 起始位置 长度
echo $变量名 | cut -b 起始位置-结束位置


[root@server0 ~]# echo ${#phone}   加#查看变量的位数
11

${变量名:起始位置:长度}使用 ：  
[root@server0 ~]# echo ${phone:0:6}  计算机从0开始截取  用冒号：隔开
138724

expr substr "$变量名" 起始位置 长度：     计算机从1开始截取

[root@server0 ~]# expr substr  $phone 1 3   
138

echo $变量名 | cut -b 起始位置-结束位置：

[root@server0 ~]# echo $phone | cut -b 3-5  代表连续截取 截取3到5位
872

[root@server0 ~]# echo $phone | cut -b 3,6,9 不连续截取 用，隔开 截取第3为，第6为，第9为
848
[root@server0 ~]# echo $phone | cut -b 3   截取单个字符 
8

[root@server0 ~]# echo $phone | cut -b 3-  截取第三位后面的所有的数字
872446891



#########################################################################################################################################

字符串的替换：
[root@server0 ~]# echo ${phone//4/#}   两个//换成所有 一个/换第一个字符
13872##6891

字符串掐头：
从左向右，最短匹配删除
格式：${变量名#*关键词}  一个#最短 两个#最长
删除从左侧第1个字符到最近的关键词“：”的部分，* 作通配符理解：

[root@server0 ~]# echo $a 
root:x:0:0:root:/root:/bin/bash
[root@server0 ~]# echo ${a#*:}   
x:0:0:root:/root:/bin/bash
[root@server0 ~]# echo ${a##*:}
/bin/bash

字符串去尾：
从右向左，最长匹配删除
格式：${变量名%%关键词*} 一个%最短 两个%最长
删除从右侧最后1个字符到往左最远的关键词“:”的部分：

[root@server0 ~]# echo ${a%:*}
root:x:0:0:root:/root
[root@server0 ~]# echo ${a%%:*}
root

初值的检测及设置：
取值，${var:-word}
若变量var已存在且非Null，则返回 $var 的值；否则返回字串“word”，原变量var的值不受影响。
变量值已存在的情况：
[root@svr5 ~]# XX=11
[root@svr5 ~]# echo $XX              //查看原变量值
11
[root@svr5 ~]# echo ${XX:-123}      //因XX已存在，输出变量XX的值
11

expect预期交互：
基于TCL编写的自动交互式程序
   可以用在Shell脚本中，为交互式过程自动输送预先准备的脚本或指令，而无需人工干预 
  触发的依据是预期会出现的特征提示文本 

案例：

#!/bin/bash                    
expect <<  EOF                  
spawn  ssh 192.168.4.7 
expect "@"    {send "123456\n"}  
expect "root"      {send "touch /aijia.txt\n"}
expect "root"      {send "touch /2.txt\n"}
expect "root"      {send "exit\n"}
EOF

如果脚本没有运行成功 判断依据：
1.有没有expect
2.指定一个需要交互的程序
3.有没有提示yes/no 
 [root@aijia ~]# ssh -o StrictHostKeyChecking=on 第一次远程连接 不提是yes/no  
4.expect 最后一条命令不执行 ：最后一条一定要打一条没有用的命令 来结束！！


正则表达式： 
什么是正则表达式  Regular Express 
—使用“一串符号”来描述有共同属性的数据 

^		匹配行首
$		匹配行尾
[ ]     	集合，取集合中的任意单个字符  也可以 [a-z] 连续写 
[^]		对集合取反 
 . 
.*     	不限任何 任意所有 等同于系统 * 
\{n,m\}	匹配前一个字符n到m次 
\{n，\}   	匹配前一个字符n次以上 
\{n\} 	匹配前一个字符n次























