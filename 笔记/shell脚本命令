mail -s 标题 root  发邮件 
mail  收邮件 
pstree 查看进程树 
source 不开启子进程   可以不用给脚本执行权限
bash   开启子进程  加参数 x 开启排错功能	 脚本告诉正在执行的东西   可以不用给脚本执行权限 		
sh    开启子进程  加参数 x 开启排错功能	 脚本告诉正在执行的东西  可以不用给脚本执行权限 
> 正确导出 
2> 错误导出 
变量名的组成  字母 数字 下划线  但是不能以数字开头  
比如  n1=11 可以  1n=11 不可以 
 unset 取消别名  
变量定义的时候 不允许有空格  比如n1 = 11  不可以！！！
PS1 修改一级提示符 
PS2 修改二级提示符 
env 查看到环境变量值 
set 查看所以变量值 

$0 代表脚本自己
$$ 显示PID号  
$* 显示所有参数数值 
$# 计算总共多少钱参数数值 
echo $? 问上一个命令是否正确  0为对 非0为错 （只能查询上一条命令）
使用双引号可以界定一个完整字串 (把分散的东西 合成一个东西) 脚本加入双引号  可以防止出错 
例如：
[root@server0 ~]# SCHOOL=Tarena IT Group
-bash: IT: command not found                      //未界定时赋值失败
[root@server0 ~]# SCHOOL="Tarena IT Group"          //界定后成功
[root@server0 ~]# touch aa bb                      //创建了两个文件
[root@server0 ~]# touch "aa bb"                    //创建了一个文件
[root@server0 ~]# ls                                //查看结果

单引号跟双引号唯一的区别 单引可以实现屏蔽特殊符号的功能  
例如
[root@server0 ~]# echo "$test"
显示赋值内容
[root@server0 ~]# echo '$test'
显示的$test

 `` 反撇号 使用反撇号或$()时，可以将命令执行的标准输出作为字符串存储，因此称为命令替换
    比如 备份 tar -czf log-`date +%Y%m%d`.tar.gz  /var/log  文件名会已当前日期为名称！！！

date +%Y%m%d  输出结果为年月日  
#date +%Y%m%d
20180423


一个规范shell脚本构成 
脚本声明
注释说明 
可执行代码
read 只定义别名 不赋值    参数 -p 提示信息 
例如：
#!/bin/bash 
read -p "请输入用户名：" name
stty -echo
read -p "请输入密码：" pass
stty echo
        useradd $name
        echo $pass | passwd --stdin $name 

stty -echo 关闭显示 （屏蔽屏幕输出）   
stty echo  开启显示 （取消屏蔽屏幕输出）

局部定义变量
例如 xixi=123  再开一个子进程之后 此变量失效 

export 定义全局变量 
例如： 
[root@server0 ~]#export hehe=12345  定义全局变量  
[root@server0 ~]#echo $hehe  验证 
12345
[root@server0 ~]#bash              新打开一个子进程   
[root@server0 ~]# echo $hehe   验证
12345 
[root@server0 ~]# bash		   再开一个子进程  
[root@server0 ~]# echo $hehe  验证 
12345

也可以把局部变量重新定义为全部变量  
 例如 

[root@server0 ~]#  xixi=123 
[root@server0 ~]#  echo $xixi 
[root@server0 ~]#  export xixi  将原有的局部变量 重新定义成全局变量
[root@server0 ~]# unset   取消变量 
