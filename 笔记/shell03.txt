shell 第三天     for循环

结构：  for  变量名  in  值列表    #循环多少次取决于值列表有几个值  
       do
          echo 你好
       done  

[root@server0 ~]# vim /root/for.sh
#!/bin/bash
for i in 1 2 3 4 5
do
  echo "你好"
done

你好
你好
...

[root@server0 ~]# vim /root/for.sh
#!/bin/bash
for i in {1..10}
do
  echo $i
done
~   
1
2
... 

2)  `seq5`  #是一条命令   在脚本中为`seq10` 和{1..10}作用一样 循环10次
       
[root@server0 ~]# seq 5    #默认从1到5
1
2
3
4
5

[root@server0 ~]# seq 5 10   #从5到10
5
6
7
8
9
10
[root@server0 ~]# seq 1 3 10   #从 1开始差值为3 最大到10结束
1
4
7
10

批量检测多个主机的存活状态     #隔一秒ping一次
[root@zj ~]# vim /root/for.sh 
#!/bin/bash
 for i in {1..254}
 do
   ping -c1 -i 0.1 W1 172.40.51.$i  &> /dev/null
if  [ $? -eq 0 ];then
  echo "tong"
else
  echo "butong"
fi
done


[root@zj ~]# ping -i0.1 172.40.50.127   # 按顺序去ping每隔0.1秒ping一次

[root@zj ~]# ping -W1 192.168.1.5  # 按顺序去ping超时 1秒后 不管通不通 ping下一个

echo -n #不换行

9*9乘法表
[root@zj ~]# vim /root/99.sh

#!/bin/bash
for i in `seq 9`
do
   for j in `seq $i`
   do
     m=$[i*j]
   echo -n "$i*$j=$m  "
   done
   echo 
done

/root/99.sh

1*1=1  
2*1=2  2*2=4  
3*1=3  3*2=6  3*3=9  
4*1=4  4*2=8  4*3=12  4*4=16  
5*1=5  5*2=10  5*3=15  5*4=20  5*5=25  
6*1=6  6*2=12  6*3=18  6*4=24  6*5=30  6*6=36  
7*1=7  7*2=14  7*3=21  7*4=28  7*5=35  7*6=42  7*7=49  
8*1=8  8*2=16  8*3=24  8*4=32  8*5=40  8*6=48  8*7=56  8*8=64  
9*1=9  9*2=18  9*3=27  9*4=36  9*5=45  9*6=54  9*7=63  9*8=72  9*9=81 

while循环属于条件式的执行流程，会反复判断指定的测试条件，只要条件成立即执行固定的一组操作，直到条件变化为不成立为止。所以while循环的条件一般通过变量来进行控制，在循环体内对变量值做相应改变，以便在适当的时候退出，避免陷入死循环。

while循环的语法结构如下所示：

    while  条件测试  当条件满足时
    do
        命令序列
    done

[root@zj ~]# vim /root/123.sh   #i值不变的情况下，是死循环（一直echo haha）
i=1
while [ $i -le 5 ]
do
  echo haha
  donei


[root@zj ~]# vim /root/123.sh  #i值变化的情况下，循环5次结束 当条件判断为假的时候结束
i=1
while [ $i -le 5 ]
do
  echo haha
  let idd++
done

死循环一般格式：    #死循环极其消耗CPU
while：
do 
     命令
done


猜数的脚本
[root@zj ~]# vim cai.sh
#!/bin/bash
num=$[RANDOM%100]
i=0
while :
do
read -p "请输入数字：" cai
let i++
if [ $cai -eq $num ];then
  echo "恭喜"
  echo 您一共猜了$i次  
  exit
elif [ $cai -gt $num ];then
  echo "caida"
else
  echo "caixiao"
fi
done

ping172.40.51.1-172.40.51.254计算机

[root@zj ~]# vim /root/ping.sh 
#!/bin/bash
 i=1
 while [ $i -le 254 ]
 do
    ping -c2 -i 0.1  -W2 172.40.51.$i &>/dev/null
if [ $? -eq 0 ];then
    echo "tong"
 else
   echo "butong"
fi
 let i++
 done 

计算1到100的求和
[root@zj ~]# vim /root/100.sh
#!/bin/bash
sum=0
i=1
while [ $i -le 100 ]
do
  sum=$[sum+i]
  let i++
done
echo 总和是 $sum 

基于case分支编写脚本
例题：
vim /root/abc.sh
#!/bin/bash
case $1 in
-n)
  touch $2;;
-e)
  vim $2;;
-c)
 cat $2;;
-r)
  rm -rf $2;;
*)
  echo "$0 (-n|-e|-c|-r) file";;
esac

：使用Shell函数   #给一段代码取别名

格式1：

    function  函数名 {
        命令序列
        .. ..
    }

格式2：

    函数名() {
        命令序列
        .. ..
    }

简单的应用：
[root@zj ~]# mycd(){     #定义函数名 临时的（在命令行执行）
> mkdir /test
> cd /test
> }
[root@zj ~]# mycd        #测试   常量只能运行一次，
[root@zj test]# 

echo -e  #扩展echo的功能
[root@server0 ~]# echo -e "\033[36m寇淑蕊\033[0m"
寇淑蕊
颜色输出的命令:echo -e "\033[32mOK\033[0m"。
0X为样式 ，3X为字体颜色，4X为背景颜色。

5 脚本的中断及退出
通过break、continue、exit在Shell脚本中实现中断与退出的功能。
break可以结束整个循环；continue结束本次循环，进入下一次循环；exit结束整个脚本，案例如下
1)continue结束本次循环

[root@server0 ~]# vim /root/test.sh 
#!/bin/bash
for i in {1..5}    # 当$1=4时 结束本次循环，进行下一次循环
do
   [ $i -eq 4 ] && continue
   echo $i
done
~   
2）break可以结束整个循环
#!/bin/bash
for i in {1..5}    # 当$1=4时 结束for的整个循环
do
   [ $i -eq 4 ] && continue
   echo $i
done

3)exit结束整个脚本
#!/bin/bash
for i in {1..5}
do
   [ $i -eq 4 ] && exit   #来不及显示GameOver 直接推出
   echo $i
done
echo gameover

 









  

